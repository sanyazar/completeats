#!/usr/bin/perl

#Author: Ryan Bullock
#Version: 0.2
#Description: This provided a very simple command server for the asterisk manager interface.

use strict;
use warnings;

use Proc::Daemon;
use Proc::PID::File;
use Getopt::Long;
use Cwd;
use File::Spec::Functions;
use AnyEvent::Impl::Perl;
use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Asterisk::AMI;


# Daemonize
#my $pf = catfile(getcwd(), 'atsrobot.pid');
my $pf = catfile('/run/atsrobot.pid');
my $daemon = Proc::Daemon->new(
    pid_file => $pf,
    work_dir => getcwd()
);

#Proc::Daemon::Init();

# are you running?  Returns 0 if not.
my $pid = $daemon->Status($pf);
my $daemonize = 1;

#GetOptions(
#    'daemon!' => \$daemonize,
#    "start" => \&run,
#    "status" => \&status,
#    "stop" => \&stop
#);
GetOptions(
    'daemon!' => \$daemonize,
    "help"    => \&usage,
    "reload"  => \&reload,
    "restart" => \&restart,
    "start"   => \&run,
    "status"  => \&status,
    "stop"    => \&stop
    ) or &usage;

#print $pf."+".$pid."\n";
#sleep(100);
#AnyEvent::Impl::Perl::loop;
exit(0);
# ==================================================
sub usage
{
    my ($opt_name, $opt_value) = @_;
    print "your usage text goes here...\n";
    exit(0);
}
# ==================================================
sub reload
{
    my ($opt_name, $opt_value) = @_;
    print "reload process not implemented.\n";
}
# ==================================================
sub restart
{
    my ($opt_name, $opt_value) = @_;
    &stop;
    &run;
}
# ==================================================
sub stop {
        if ($pid) {
            print "Stopping pid $pid...\n";
            if ($daemon->Kill_Daemon($pf)) {
                print "Successfully stopped.\n";
            } else {
                print "Could not find $pid.  Was it running?\n";
            }
         } else {
                print "Not running, nothing to stop.\n";
         }
}

sub status {
    if ($pid) {
        print "Running with pid $pid.\n";
    } else {
        print "Not running.\n";
    }
}

sub run {
    if (!$pid) {
        print "Starting...\n";
        if ($daemonize) {
            # when Init happens, everything under it runs in the child process.
            # this is important when dealing with file handles, due to the fact
            # Proc::Daemon shuts down all open file handles when Init happens.
            # Keep this in mind when laying out your program, particularly if
            # you use filehandles.
            $daemon->Init;
        }


        while (1) {
            open(my $FH, '>>', catfile(getcwd(), "log.txt"));
                        # any code you want your daemon to run here.

		&dbparse();
                        # this example writes to a filehandle every 5 seconds.
            print $FH "Logging at " . time() . "\n";
            close $FH;
            #sleep 15;
        }
    } else {
        print "Already Running with pid $pid\n";
    }
}
#if (Proc::PID::File->running()) {
#  print "Already running\n";
#  exit 0;
#}

sub dbparse {
	use Data::Dumper;

	use Time::HiRes qw(usleep);

	use DBI;
	# имя базы данных
	my $dbname = "asterisk";
	# имя пользователя
	my $username = "asterisk";
	# пароль
	#my $password = "AstraKonESTIk98";
	my $password = "asteposter54gy";
	# имя или IP адрес сервера
	my $dbhost = "localhost";
	# порт
	my $dbport = "5432";
	# опции
	my $dboptions = "-e";
	# терминал
	my $dbtty = "ansi";

	my $robottablename = 'callrobot';

	my $queryupdate;
	my $rvupdate;

	my $dbh = DBI->connect("dbi:Pg:dbname=$dbname;host=$dbhost;port=$dbport;options=$dboptions;tty=$dbtty","$username","$password",
			    {PrintError => 0});




	#my $query = "SELECT id, dst, pmt_id, srv_id, mch_id, bill_id, isp2p, statuscode FROM callrobot WHERE (processedtime IS NULL) AND (id = 1750)";
	my $query = "SELECT id, dst, pmt_id, srv_id, mch_id, bill_id, isp2p, statuscode FROM callrobot WHERE (((callfrom = callto) AND (callfrom + interval '10 min' > NOW())) OR (callto >= NOW())) AND (processedtime IS NULL)";

	my $sth = $dbh->prepare($query);
	my $rv;
	my @array;

use Asterisk::AMI;
#Connect to asterisk
my $astman = Asterisk::AMI->new(PeerAddr => '127.0.0.1',
	Username => 'zar',
	Secret	=> 'PASSWDzar',
	Timeout => 1, #Default timeout for all operations, 3 seconds
	Keepalive => 60, #Send a keepalive every minute
	on_error => sub { print "Error occured on socket\r\n"; exit; },
	on_timeout => sub { print "Connection to asterisk timed out\r\n"; exit; },
	Blocking => 0,
	#OriginateHack => 0
);

my $callbyfile = 1;
my $chancount = 0;
die "Unable to connect to asterisk" unless ($astman);
	my $continue = 1;
	my $exten = 'p2p';
	$SIG{TERM} = sub { $continue = 0 };

	my $logFileName = '/tmp/ast_robot.log';
	my $LOG_FILE;

	open $LOG_FILE, '>>', $logFileName;

	my $response;

	# Enter loop to do work
	while ($continue) {
	  $rv = $sth->execute();
	  if (!defined $rv) {
	    print "При выполнении запроса '$query' возникла ошибка: " . $dbh->errstr . "\n";
	    exit(0);
	  }

	  while (@array = $sth->fetchrow_array()) {
	  	print $LOG_FILE "\nRequesting $array[1]...\n";
	  	print "\nRequesting $array[1]...\n";

		#$astman->send_action({  Action => 'Originate',
		#	Channel => 'Local/0682101230@from-callout-remote',
		#	Callerid => 'P2P',
		#	Timeout => 15000,
		#	Context => 'from-callout-local',
		#	Exten => 'p2p',
		#	Variable => 'COACTIONID=1',
		#	Async => '1',
		#	}, \&callcb);

                #$astman->send_action({  Action => 'Originate',
		#if ($callbyfile == 0) {
		#	callfile(@array);
		#} else {
			if ($array[7] eq 'ufkg1') {$exten = 'ufkg1'}
			else {$exten = 'p2p'}
			$astman->action({  Action => 'Originate',
						Channel => 'Local/'.$array[1].'@from-callout-remote',
						Callerid => $exten,
						#Timeout => 15000,
						#WaitTime => 60,
						Context => 'from-callout-local',
						Exten => $exten,
						Variable => [ '__REALDST='.$array[1], '__COACTIONID="'.$array[7], '"__COPMTID='.$array[1], '__TASKID='.$array[0] ],
						Async => '1'
			});
		#}
                #}, \&callcb, undef, 'local');
		#sleep(2);
		#print Dumper($response);

	    $queryupdate = "UPDATE callrobot SET processedtime = NOW() WHERE id = $array[0]";
	    $rvupdate = $dbh->do($queryupdate);
		#$chancount = vegacount();
		#while ($chancount > 40) {
		##	usleep(100000);
		#}
	  }
	  # Sleep for 100 ms to reduce load on the database
	  #sleep(500000);
          #sleep(1);
	}
	$sth->finish();
	$dbh->disconnect();
	close $LOG_FILE;

}

sub callfile {

my $taskid = shift;
my $number = shift;
my $copmtid = shift;
my $cosrvid = shift;
my $comchid = shift;
my $cobillid = shift;
my $coisp2p = shift;
my $costatuscode = shift;
#id, dst, pmt_id, srv_id, mch_id, bill_id, isp2p, statuscode
my $grpid = 'VEGA';
#my $grpmaxcount = shift;
#my $parentuniqueid = shift;
#my $channaldial = shift;
#my $number = shift;
#my $parentexten = shift;
#my $prefgrp = shift;

##callback.pl '${GroupID}' '${GrpMaxCount}' '${PARENTUNIQUEID}' 'SIP/3002/20${nomer:1}' '${nomer:2}' '${ParentEXTEN}')
##/etc/asterisk/script/callback.sh KS_GRP 1439974746.216166 SIP/3001/100682101230 682101230
##sleep 10

#if [ "x$3" == "x" ]; then exit 1; fi
#if [ "x$4" != "x" ]; then phone_number="$4"; else phone_number="$3"; fi

#$channel=$3;
#                $astman->action({  Action => 'Originate',
#                                        Channel => 'Local/'.$array[1].'@from-callout-remote',
#                                        Callerid => 'p2p',
#                                        #Timeout => 15000,
#					#WaitTime => 60,
#                                        Context => 'from-callout-local',
#                                        Exten => 'p2p',
#                                        Variable => [ '__REALDST='.$array[1], '__COACTIONID="'.$array[7], '"__COPMTID='.$array[1], '__TASKID='.$array[0] ],
#                                        Async => '1'
#                });
my $channel='Local/'.$number.'@from-callout-remote';

my $callcontent = "Channel: $channel";

#MaxRetries: 1
#RetryTime: 5
$callcontent .= "\n"."WaitTime: 60";
$callcontent .= "\n"."MaxRetries: 1";
#$callcontent .= "\n"."MaxRetries: 2";
#$callcontent .= "\n"."RetryTime: 5";
#$callcontent .= "Timeout: 40";
$callcontent .= "\n"."Callerid: $number";
$callcontent .= "\n"."Set: __TASKID=$taskid";
$callcontent .= "\n"."Set: __COPMTID=$copmtid";
$callcontent .= "\n"."Set: __REALDST=$number";
$callcontent .= "\n"."Set: __COACTIONID=$costatuscode";
#$callcontent .= "\n"."Set: __PrefGRP=$prefgrp";
#$callcontent .= "\n"."Set: __ParentID=$parentuniqueid";
#$callcontent .= "\n"."Set: __ParentEXTEN=$parentexten";
#$callcontent .= "\n"."Set: __GroupID=$grpid";
#$callcontent .= "\n"."Set: __GrpMaxCount=$grpmaxcount";
#$callcontent .= "\n"."Set: __CallChannel=$channaldial";
$callcontent .= "\n"."Context: from-callout-local";
$callcontent .= "\n"."Extension: p2p";
$callcontent .= "\n"."Priority: 1";
$callcontent .= "\n"."AlwaysDelete: Yes";
$callcontent .= "\n"."Archive: Yes";

my $filename = "/var/spool/asterisk/tmp/$number";
my $filename2 = "/var/spool/asterisk/outgoing/$number";

open(my $fh, '>:encoding(UTF-8)', $filename) or die "Could not open file '$filename' $!";
print $fh $callcontent;
close($fh);
#open($fh, '>:encoding(UTF-8)', $filename."~copy") or die "Could not open file '$filename' $!";
#print $fh $callcontent;
#close($fh);

chmod(0644, $filename);

`mv $filename $filename2`;

}

#use AnyEvent::Impl::Perl;
#use AnyEvent;
#use AnyEvent::Handle;
#use AnyEvent::Socket;
#
##Port to listen on
#my $port = 5080;
#
##Delimiters
#my $EOL = "\015\012";
#
#my $EOR = $EOL;
#
##Command list;
#my $list = 'Command List:' . $EOL;
#$list .= 'channels - Displays list of active channels' . $EOL;
#$list .= 'mailbox <mailbox> - Displays messages for a mailbox' . $EOL;
#$list .= 'hangup <channel> - Hangs up a channel' . $EOL;
#$list .= 'quit - Disconnects from server' . $EOL;
#$list .= 'list - Displays this list' . $EOL . $EOR;
#
##Keep a list of clients
#my %clients;
#
##Callback on mailbox command
#sub mailboxcb {
#	my ($asterisk, $action, $client) = @_;
#
#	my $id = $action->{'ActionID'};
#	
#	my $mbstr;
#
#	if ($action->{'GOOD'} && exists $action->{'PARSED'}) {
#		while (my ($key, $value) = each %{$action->{'PARSED'}}) {
#			$mbstr .= $key . ': '. $value . $EOL;
#		}
#	} else {
#		$mbstr = 'Invalid Mailbox, or command failed' . $EOL;
#	}
#
#	$client->push_write($mbstr . $EOR);
#}
#
##Callback on channels command
#sub chancb {
#	my ($asterisk, $action, $client) = @_;
#
#	my $id = $action->{'ActionID'};
#	
#	my $chanstr;
#
#	if ($action->{'GOOD'} && exists $action->{'EVENTS'}) {
#		foreach my $channel (@{$action->{'EVENTS'}}) {
#			$chanstr .= $channel->{'Channel'} . $EOL;
#		}
#	} else {
#		$chanstr = 'No channels active' . $EOL;
#	}
#
#	$client->push_write($chanstr . $EOR);
#}
#
##Callback on channels command
#sub peerscb {
#	my ($asterisk, $action, $client) = @_;
#
#	my $id = $action->{'ActionID'};
#	
#	my $chanstr;
#
#	if ($action->{'GOOD'} && exists $action->{'EVENTS'}) {
#		foreach my $channel (@{$action->{'EVENTS'}}) {
#			$chanstr .= $channel->{'Channel'} . $EOL;
#		}
#	} else {
#		$chanstr = 'No channels active' . $EOL;
#	}
#
#	$client->push_write(Dumper(\$action) . $EOR);
#}
#
#Callback on call command
sub callcb {
	my ($asterisk, $action, $client) = @_;
	print "$action\n";

	my $id = $action->{'ActionID'};

	my $str;

	if ($action->{'GOOD'}) {
		$str = 'Channel hungup';
	} else {
		$str = 'Failed to hangup channel';
	}	

	print $str."\n";
	#$client->push_write($str . $EOL . $EOR);
}

sub vegacount {
	my $groups_str = `asterisk -rx 'group show channels'`;
	#print $groups_str;
	my @groups = split("\n",$groups_str);
	my $item;
	my  @fields;
	my $count = 0;

	#print "======\n".$groups[0]."\n";
	#print "======\n".$groups[1]."\n";
	#print "======\n".$groups[2]."\n";

	#print shift @groups while @groups;

	while (@groups) {
		$item = shift @groups;
		#print "\n";
		@fields = split (/\s+/, $item);
		$count++ if ($fields[2] eq 'VEGA');
	}
	return $count;
}

#Callback on hangup command
sub hangupcb {
	my ($asterisk, $action, $client) = @_;

	my $id = $action->{'ActionID'};

	my $str;

	if ($action->{'GOOD'}) {
		$str = 'Channel hungup';
	} else {
		$str = 'Failed to hangup channel';
	}	

	#$client->push_write($str . $EOL . $EOR);
}

##Remove a client if they d/c or error
#sub remove_client {
#        delete $clients{$_[0]};
#	$_[0]->destroy;
#	return 1;
#}
#
##Handle commands from clients
#sub client_input {
#	my ($handle) = @_;
#
#	my @cmd = split /\s+/,$handle->{rbuf};		
#	undef $handle->{rbuf};
#
#	return unless ($cmd[0]);
#
#	if ($cmd[0] eq 'mailbox') {
#		$astman->send_action({	Action => 'MailboxCount',
#				  	Mailbox => $cmd[1] . '@default' }, \&mailboxcb, undef, $handle);
#	} elsif ($cmd[0] eq 'channels') {
#		$astman->send_action({Action => 'Status'}, \&chancb, undef, $handle);
#	} elsif ($cmd[0] eq 'peers') {
#		$astman->send_action({Action => 'Command', Command => 'sip show peers'}, \&peerscb, undef, $handle);
#	} elsif ($cmd[0] eq 'call') {
#		$astman->send_action({	Action => 'Originate',
#					Channel => 'Local/'.$cmd[1].'@from-callout-remote', 
#					Callerid => $cmd[2], 
#					Timeout => 15000,
#					Context => 'from-callout-local',
#					Exten => $cmd[2], 
#					Variable => 'COACTIONID='.$cmd[3],
#					Async => '1', 
#					 }, \&callcb, undef, $handle);
#	} elsif ($cmd[0] eq 'hangup') {
#		$astman->send_action({	Action => 'Hangup',
#					Channel => $cmd[1] }, \&hangupcb, undef, $handle);
#	} elsif ($cmd[0] eq 'list') {
#		$handle->push_write($list);
#	} elsif ($cmd[0] eq 'quit') {
#		$handle->push_write('Goodbye' . $EOL . $EOR);
#		remove_client($handle);
#	} else {
#		$handle->push_write('Invalid Command' . $EOL . $EOR);
#	}
#	
#	return 1;
#}
#
##Handles new connections
#sub new_client {
#	my ($fh, $host, $port) = @_;
#
#	#Create an AnyEvent handler for the client
#	my $handle = new AnyEvent::Handle(	fh => $fh,
#						on_error => \&remove_client,
#						on_eof => \&remove_client
#						);
#
#	#Read what to do on client input
#	$handle->on_read(\&client_input);
#
#	#Send a greeting
#	$handle->push_write('Connected to command server.' . $EOL);
#	$handle->push_write('Enter \'list\' for a list of commands' . $EOL);
#
#        $clients{$handle} = $handle;
#}

##Our server to accept connections
##tcp_server undef, $port, \&new_client;
#sub telnetparse {
##Start our server
#	print "Starting Command Server\r\n";
#	AnyEvent::Impl::Perl::loop;
#}
